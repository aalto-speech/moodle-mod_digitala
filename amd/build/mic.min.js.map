{"version":3,"sources":["../src/mic.js"],"names":["recorder","isRecording","audio","startStopRecording","navigator","mediaDevices","getUserMedia","then","stream","options","audioBitsPerSecond","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","startRecording","window","console","log","catch","err","error","stopRecording","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","listenRecording","play","initializeMicrophone","recButton","document","getElementById","stopButton","listenButton","disabled","onclick","style","backgroundColor","display"],"mappings":"6JAMA,uD,GAEIA,CAAAA,C,CACAC,CAAW,G,CACXC,C,CAEEC,CAAkB,CAAG,UAAM,CAC7B,OAAQF,CAAR,EACI,OACIG,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC,CAACJ,KAAK,GAAN,CAApC,EACKK,IADL,CACU,SAAAC,CAAM,CAAI,CACZ,GAAMC,CAAAA,CAAO,CAAG,CACZC,kBAAkB,CAAE,IADR,CAEZC,IAAI,CAAE,OAFM,CAGZC,YAAY,CAAEC,UAAUC,mBAHZ,CAIZC,QAAQ,CAAE,WAJE,CAAhB,CAMAf,CAAQ,CAAG,GAAIa,UAAJ,CAAcL,CAAd,CAAsBC,CAAtB,CAAX,CACAR,CAAW,GAAX,CAEAD,CAAQ,CAACgB,cAAT,GACAC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,mBAAnB,CAGH,CAfL,EAgBKC,KAhBL,CAgBW,SAACC,CAAD,CAAS,CACZJ,MAAM,CAACC,OAAP,CAAeI,KAAf,CAAqBD,CAArB,CACH,CAlBL,EAmBA,MAEJ,OACIpB,CAAW,GAAX,CACAD,CAAQ,CAACuB,aAAT,CAAuB,UAAM,CACzB,GAAMC,CAAAA,CAAS,CAAGxB,CAAQ,CAACyB,OAAT,EAAlB,CACAR,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,YAAnB,CAAiCK,CAAjC,EAEA,GAAME,CAAAA,CAAQ,CAAGC,GAAG,CAACC,eAAJ,CAAoBJ,CAApB,CAAjB,CACAtB,CAAK,CAAG,GAAI2B,CAAAA,KAAJ,CAAUH,CAAV,CAAR,CACAT,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,UAAnB,CAA+BO,CAA/B,CACH,CAPD,EAQAT,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,mBAAnB,EACA,MAlCR,CAoCH,C,CAEKW,CAAe,CAAG,UAAM,CAC1B,GAAI5B,CAAK,SAAT,CAAyB,CACrBA,CAAK,CAAC6B,IAAN,EACH,CACJ,C,wBAEmC,QAAvBC,CAAAA,oBAAuB,EAAM,IAChCC,CAAAA,CAAS,CAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CADoB,CAEhCC,CAAU,CAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAFmB,CAGhCE,CAAY,CAAGH,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAHiB,CAItCC,CAAU,CAACE,QAAX,IACAD,CAAY,CAACC,QAAb,IAEAL,CAAS,CAACM,OAAV,CAAoB,UAAM,CACtBN,CAAS,CAACO,KAAV,CAAgBC,eAAhB,CAAkC,MAAlC,CACAR,CAAS,CAACK,QAAV,IACAF,CAAU,CAACE,QAAX,IACAD,CAAY,CAACG,KAAb,CAAmBE,OAAnB,CAA6B,MAA7B,CACAvC,CAAkB,EACrB,CAND,CAOAiC,CAAU,CAACG,OAAX,CAAqB,UAAM,CACvBN,CAAS,CAACO,KAAV,CAAgBC,eAAhB,CAAkC,KAAlC,CACAR,CAAS,CAACK,QAAV,IACAF,CAAU,CAACE,QAAX,IACAD,CAAY,CAACC,QAAb,IACAD,CAAY,CAACG,KAAb,CAAmBE,OAAnB,CAA6B,cAA7B,CACAvC,CAAkB,EACrB,CAPD,CAQAkC,CAAY,CAACE,OAAb,CAAuB,UAAM,CACzBT,CAAe,EAClB,CACJ,C","sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport RecordRTC from 'RecordRTC';\n\nlet recorder;\nlet isRecording = false;\nlet audio;\n\nconst startStopRecording = () => {\n    switch (isRecording) {\n        case false:\n            navigator.mediaDevices.getUserMedia({audio: true})\n                .then(stream => {\n                    const options = {\n                        audioBitsPerSecond: 16000,\n                        type: 'audio',\n                        recorderType: RecordRTC.StereoAudioRecorder,\n                        mimeType: 'audio/wav'\n                    };\n                    recorder = new RecordRTC(stream, options);\n                    isRecording = true;\n\n                    recorder.startRecording();\n                    window.console.log('started to record');\n\n                    return;\n                })\n                .catch((err) => {\n                    window.console.error(err);\n                });\n            break;\n\n        case true:\n            isRecording = false;\n            recorder.stopRecording(() => {\n                const audioBlob = recorder.getBlob();\n                window.console.log('audioBlob:', audioBlob);\n\n                const audioUrl = URL.createObjectURL(audioBlob);\n                audio = new Audio(audioUrl);\n                window.console.log('audioUrl', audioUrl);\n            });\n            window.console.log('recording stopped');\n            break;\n    }\n};\n\nconst listenRecording = () => {\n    if (audio !== undefined) {\n        audio.play();\n    }\n};\n\nexport const initializeMicrophone = () => {\n    const recButton = document.getElementById('record');\n    const stopButton = document.getElementById('stopRecord');\n    const listenButton = document.getElementById('listenButton');\n    stopButton.disabled = true;\n    listenButton.disabled = true;\n\n    recButton.onclick = () => {\n        recButton.style.backgroundColor = \"blue\";\n        recButton.disabled = true;\n        stopButton.disabled = false;\n        listenButton.style.display = 'none';\n        startStopRecording();\n    };\n    stopButton.onclick = () => {\n        recButton.style.backgroundColor = \"red\";\n        recButton.disabled = false;\n        stopButton.disabled = true;\n        listenButton.disabled = false;\n        listenButton.style.display = 'inline-block';\n        startStopRecording();\n    };\n    listenButton.onclick = () => {\n        listenRecording();\n    };\n};"],"file":"mic.min.js"}