{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint-disable no-nested-ternary */\n\nimport RecordRTC from 'RecordRTC';\nimport mdlcfg from 'core/config';\nimport {get_strings as getStrings} from 'core/str';\n\nlet recorder;\nconst recButton = document.getElementById('record');\nconst listenButton = document.getElementById('listen');\nlet audio;\nlet langStrings;\nlet pagenum;\nlet assignmentId;\nlet userId;\nlet username;\nlet maxLength;\nlet timeout;\nlet interval;\nlet sec;\n\nconst convertSecondsToString = (seconds) => {\n    let hours = Math.floor(seconds / 3600);\n    let minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    let second = Math.floor(seconds - (hours * 3600) - (minutes * 60));\n\n    hours = hours === 0\n        ? ''\n        : hours < 10\n            ? `0${hours}:`\n            : `${hours}:`;\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    second = second < 10 ? `0${second}` : `${second}`;\n\n    return `${hours}${minutes}:${second}`;\n};\n\nconst startRecording = async() => {\n    const notGranted = (await navigator.mediaDevices.enumerateDevices())[0].label === '';\n    if (notGranted) {\n        try {\n            navigator.mediaDevices.getUserMedia({audio: true});\n            recButton.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\">'\n            + '</span><span class=\"sr-only\">' + langStrings[2] + '</span>';\n        } catch {\n            recButton.textContent = langStrings[3];\n            return;\n        }\n    }\n\n    clearTimeout(timeout);\n    clearInterval(interval);\n\n    if (navigator.mediaDevices !== undefined) {\n        navigator.mediaDevices.getUserMedia({audio: true})\n        .then(stream => {\n            const options = {\n                audioBitsPerSecond: 16000,\n                desiredSampRate: 16000,\n                type: 'audio',\n                recorderType: RecordRTC.StereoAudioRecorder,\n                mimeType: 'audio/wav',\n                numberOfAudioChannels: 1,\n                disableLogs: true\n            };\n            recorder = new RecordRTC(stream, options);\n\n            recorder.startRecording();\n\n            recButton.innerHTML = '<span>' + langStrings[1] + '</span> ' + document.getElementById('stopIcon').innerHTML;\n            recButton.onclick = stopRecording;\n            listenButton.disabled = true;\n\n            sec = 0;\n            interval = setInterval(() => {\n                sec += 1;\n                document.getElementById('recordingLength').textContent = convertSecondsToString(sec);\n            }, 1000);\n\n            if (pagenum == 1) {\n                if (maxLength <= 0 || maxLength > 300) {\n                    maxLength = 300;\n                }\n\n                timeout = setTimeout(() => {\n                    stopRecording();\n                }, maxLength * 1000);\n            }\n            return;\n        })\n        .catch(() => {\n            recButton.textContent = langStrings[3];\n        });\n    } else {\n        recButton.textContent = langStrings[3];\n        return;\n    }\n};\n\nconst stopRecording = () => {\n    if (recorder.getState() === 'recording') {\n\n        recorder.stopRecording(() => {\n            clearTimeout(timeout);\n            clearInterval(interval);\n            const audioBlob = recorder.getBlob();\n            const audioUrl = URL.createObjectURL(audioBlob);\n            audio = new Audio(audioUrl);\n\n            if (pagenum === 1) {\n                const form = new FormData();\n                form.append('repo_id', '5');\n                form.append('ctx_id', mdlcfg.contextid);\n                form.append('itemid', '0');\n                form.append('savepath', '/');\n                form.append('sesskey', mdlcfg.sesskey);\n                form.append('repo_upload_file', audioBlob,\n                    `ans-${assignmentId}-${userId}-${username}-${new Date().valueOf()}.wav`);\n                form.append('overwrite', '1');\n\n                const req = new XMLHttpRequest();\n                req.open('POST', mdlcfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n                req.addEventListener('readystatechange', (event) => {\n                    if (event.target.readyState === 4) {\n                        if (event.target.status === 200) {\n                            document.forms.answerrecording[0].value = event.target.response;\n                            document.forms.answerrecording[1].value = sec;\n                            document.getElementById('submitModalButton').style.display = '';\n                        } else {\n                            document.getElementById('submitErrors').innerHTML = langStrings[4];\n                        }\n                    }\n                });\n                req.send(form);\n            }\n            recButton.innerHTML = '<span>' + langStrings[0] + '</span> ' + document.getElementById('startIcon').innerHTML;\n            recButton.onclick = startRecording;\n            listenButton.disabled = false;\n        });\n    }\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed green';\n        }\n\n    } else {\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed red';\n        }\n    }\n};\n\nexport const initializeMicrophone = async(pagenumIn, assignmentIdIn, userIdIn, usernameIn, maxLengthIn) => {\n    pagenum = pagenumIn;\n    assignmentId = assignmentIdIn;\n    userId = userIdIn;\n    username = usernameIn;\n    maxLength = maxLengthIn;\n    langStrings = await getStrings(\n        [\n            {\n                key: 'startbutton-again',\n                component: 'digitala'\n            },\n            {\n                key: 'stopbutton',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-loading',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-error',\n                component: 'digitala'\n            },\n            {\n                key: 'error-save-recording',\n                component: 'digitala'\n            }\n        ]\n    );\n\n    try {\n        recButton.onclick = startRecording;\n        listenButton.onclick = listenRecording;\n    } catch (e) {\n        return;\n    }\n};\n"],"names":["recorder","recButton","document","getElementById","listenButton","audio","langStrings","pagenum","assignmentId","userId","username","maxLength","timeout","interval","sec","startRecording","async","navigator","mediaDevices","enumerateDevices","label","getUserMedia","innerHTML","textContent","clearTimeout","clearInterval","undefined","then","stream","options","audioBitsPerSecond","desiredSampRate","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","numberOfAudioChannels","disableLogs","onclick","stopRecording","disabled","setInterval","seconds","hours","Math","floor","minutes","second","convertSecondsToString","setTimeout","catch","getState","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","form","FormData","append","mdlcfg","contextid","sesskey","Date","valueOf","req","XMLHttpRequest","open","wwwroot","addEventListener","event","target","readyState","status","forms","answerrecording","value","response","style","display","send","listenRecording","microphoneIcon","play","border","pagenumIn","assignmentIdIn","userIdIn","usernameIn","maxLengthIn","key","component","e"],"mappings":"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"}