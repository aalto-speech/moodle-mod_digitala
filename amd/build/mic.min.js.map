{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport RecordRTC from 'RecordRTC';\nimport mdlcfg from 'core/config';\nimport {get_strings as getStrings} from 'core/str';\n\nlet recorder;\nconst recButton = document.getElementById('record');\nconst listenButton = document.getElementById('listen');\nlet audio;\nlet langStrings;\nlet pagenum;\nlet assignmentId;\nlet userId;\nlet username;\nlet maxLength;\nlet timeout;\nlet interval;\nlet sec;\n\nconst convertSecondsToString = (seconds) => {\n    let hours = Math.floor(seconds / 3600);\n    let minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    let second = Math.floor(seconds - (hours * 3600) - (minutes * 60));\n\n    hours = hours === 0 ? \"\" : `${hours}:`;\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    second = second < 10 ? `0${second}` : `${second}`;\n\n    return `${hours}${minutes}:${second}`;\n};\n\nconst startRecording = async () => {\n    const notGranted = (await navigator.mediaDevices.enumerateDevices())[0].label === \"\";\n\n    if (notGranted) {\n        try {\n            navigator.mediaDevices.getUserMedia({audio: true});\n            recButton.textContent = langStrings[2];\n            return;\n        } catch {\n            recButton.textContent = langStrings[3];\n            return;\n        }\n    }\n\n    if (navigator.mediaDevices !== undefined) {\n        navigator.mediaDevices.getUserMedia({audio: true})\n        .then(stream => {\n            const options = {\n                audioBitsPerSecond: 16000,\n                desiredSampRate: 16000,\n                type: 'audio',\n                recorderType: RecordRTC.StereoAudioRecorder,\n                mimeType: 'audio/wav',\n                numberOfAudioChannels: 1,\n                disableLogs: true\n            };\n            recorder = new RecordRTC(stream, options);\n\n            recorder.startRecording();\n            window.console.log('Digitala: Started to record');\n\n            recButton.textContent = langStrings[1];\n            recButton.onclick = stopRecording;\n            listenButton.disabled = true;\n\n            sec = 0;\n            interval = setInterval(() => {\n                sec += 1;\n                document.getElementById('recordingLength').textContent = convertSecondsToString(sec);\n            }, 1000);\n            window.console.log(interval);\n\n            timeout = setTimeout(stopRecording, maxLength * 1000);\n            return;\n        })\n        .catch(() => {\n            recButton.textContent = langStrings[3];\n        });\n    }\n};\n\nconst stopRecording = () => {\n    if (recorder.getState() === \"recording\") {\n        recorder.stopRecording(() => {\n            const audioBlob = recorder.getBlob();\n            const audioUrl = URL.createObjectURL(audioBlob);\n            audio = new Audio(audioUrl);\n\n            if (pagenum === 1) {\n                const form = new FormData();\n                form.append('repo_id', '5');\n                form.append('ctx_id', mdlcfg.contextid);\n                form.append('itemid', '0');\n                form.append('savepath', '/');\n                form.append('sesskey', mdlcfg.sesskey);\n                form.append('repo_upload_file', audioBlob,\n                    `ans-${assignmentId}-${userId}-${username}-${new Date().valueOf()}.wav`);\n                form.append('overwrite', '1');\n\n                const req = new XMLHttpRequest();\n                req.open('POST', mdlcfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n                req.addEventListener('readystatechange', (event) => {\n                    if (event.target.readyState === 4) {\n                        document.forms.answerrecording[0].value = event.target.response;\n                        document.getElementById('id_submitbutton').style.display = '';\n                    }\n                });\n                req.send(form);\n            }\n            recButton.textContent = langStrings[0];\n            recButton.onclick = startRecording;\n            listenButton.disabled = false;\n            clearTimeout(timeout);\n            clearInterval(interval);\n        });\n        window.console.log('Digitala: Recording stopped');\n    }\n\n\n\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed green';\n        }\n\n    } else {\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed red';\n        }\n\n    }\n};\n\nexport const initializeMicrophone = async(pagenumIn, assignmentIdIn, userIdIn, usernameIn, maxLengthIn) => {\n    window.console.log('Digitala: Starting to initalize microphones');\n\n    pagenum = pagenumIn;\n    assignmentId = assignmentIdIn;\n    userId = userIdIn;\n    username = usernameIn;\n    maxLength = maxLengthIn;\n    langStrings = await getStrings(\n        [\n            {\n                key: 'startbutton-again',\n                component: 'digitala'\n            },\n            {\n                key: 'stopbutton',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-no_permissions',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-error',\n                component: 'digitala'\n\n            }\n        ]\n    );\n\n    if (pagenum !== 2) {\n        recButton.onclick = startRecording;\n        listenButton.onclick = listenRecording;\n    }\n};"],"names":["recorder","audio","langStrings","pagenum","assignmentId","userId","username","maxLength","timeout","interval","sec","recButton","document","getElementById","listenButton","startRecording","navigator","mediaDevices","enumerateDevices","label","getUserMedia","textContent","undefined","then","stream","options","audioBitsPerSecond","desiredSampRate","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","numberOfAudioChannels","disableLogs","window","console","log","onclick","stopRecording","disabled","setInterval","seconds","hours","minutes","second","Math","floor","setTimeout","catch","getState","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","form","FormData","append","mdlcfg","contextid","sesskey","Date","valueOf","req","XMLHttpRequest","open","wwwroot","addEventListener","event","target","readyState","forms","answerrecording","value","response","style","display","send","clearTimeout","clearInterval","listenRecording","microphoneIcon","play","border","initializeMicrophone","pagenumIn","assignmentIdIn","userIdIn","usernameIn","maxLengthIn","key","component"],"mappings":"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"}