<<<<<<< HEAD
{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint-disable no-nested-ternary */\n\nimport RecordRTC from 'RecordRTC';\nimport mdlcfg from 'core/config';\nimport {get_strings as getStrings} from 'core/str';\n\nlet recorder;\nconst recButton = document.getElementById('record');\nconst listenButton = document.getElementById('listen');\nlet audio;\nlet langStrings;\nlet pagenum;\nlet assignmentId;\nlet userId;\nlet username;\nlet maxLength;\nlet timeout;\nlet interval;\nlet sec;\n\nconst convertSecondsToString = (seconds) => {\n    let hours = Math.floor(seconds / 3600);\n    let minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    let second = Math.floor(seconds - (hours * 3600) - (minutes * 60));\n\n    hours = hours === 0\n        ? \"\"\n        : hours < 10\n            ? `0${hours}:`\n            : `${hours}:`;\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    second = second < 10 ? `0${second}` : `${second}`;\n\n    return `${hours}${minutes}:${second}`;\n};\n\nconst startRecording = async() => {\n    const notGranted = (await navigator.mediaDevices.enumerateDevices())[0].label === \"\";\n\n    if (notGranted) {\n        try {\n            navigator.mediaDevices.getUserMedia({audio: true});\n            recButton.textContent = langStrings[2];\n            return;\n        } catch {\n            recButton.textContent = langStrings[3];\n            return;\n        }\n    }\n\n    if (navigator.mediaDevices !== undefined) {\n        navigator.mediaDevices.getUserMedia({audio: true})\n        .then(stream => {\n            const options = {\n                audioBitsPerSecond: 16000,\n                desiredSampRate: 16000,\n                type: 'audio',\n                recorderType: RecordRTC.StereoAudioRecorder,\n                mimeType: 'audio/wav',\n                numberOfAudioChannels: 1,\n                disableLogs: true\n            };\n            recorder = new RecordRTC(stream, options);\n\n            recorder.startRecording();\n            window.console.log('Digitala: Started to record');\n\n            recButton.innerHTML = \"<span>\" + langStrings[1] + \"</span> \" + document.getElementById('stopIcon').innerHTML;\n            recButton.onclick = stopRecording;\n            listenButton.disabled = true;\n\n            sec = 0;\n            interval = setInterval(() => {\n                sec += 1;\n                document.getElementById('recordingLength').textContent = convertSecondsToString(sec);\n            }, 1000);\n\n            if (maxLength !== \"0\") {\n                timeout = setTimeout(stopRecording, maxLength * 1000);\n            }\n\n            return;\n        })\n        .catch(() => {\n            recButton.textContent = langStrings[3];\n        });\n    } else {\n        recButton.textContent = langStrings[3];\n        return;\n    }\n};\n\nconst stopRecording = () => {\n    if (recorder.getState() === \"recording\") {\n        recorder.stopRecording(() => {\n            const audioBlob = recorder.getBlob();\n            const audioUrl = URL.createObjectURL(audioBlob);\n            audio = new Audio(audioUrl);\n\n            if (pagenum === 1) {\n                const form = new FormData();\n                form.append('repo_id', '5');\n                form.append('ctx_id', mdlcfg.contextid);\n                form.append('itemid', '0');\n                form.append('savepath', '/');\n                form.append('sesskey', mdlcfg.sesskey);\n                form.append('repo_upload_file', audioBlob,\n                    `ans-${assignmentId}-${userId}-${username}-${new Date().valueOf()}.wav`);\n                form.append('overwrite', '1');\n\n                const req = new XMLHttpRequest();\n                req.open('POST', mdlcfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n                req.addEventListener('readystatechange', (event) => {\n                    if (event.target.readyState === 4) {\n                        document.forms.answerrecording[0].value = event.target.response;\n                        document.forms.answerrecording[1].value = sec;\n                        document.getElementById('id_submitbutton').style.display = '';\n                    }\n                });\n                req.send(form);\n            }\n            recButton.innerHTML = \"<span>\" + langStrings[0] + \"</span> \" + document.getElementById('startIcon').innerHTML;\n            recButton.onclick = startRecording;\n            listenButton.disabled = false;\n            clearTimeout(timeout);\n            clearInterval(interval);\n        });\n        window.console.log('Digitala: Recording stopped');\n    }\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed green';\n        }\n\n    } else {\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed red';\n        }\n\n    }\n};\n\nexport const initializeMicrophone = async(pagenumIn, assignmentIdIn, userIdIn, usernameIn, maxLengthIn) => {\n    window.console.log('Digitala: Starting to initalize microphones');\n\n    pagenum = pagenumIn;\n    assignmentId = assignmentIdIn;\n    userId = userIdIn;\n    username = usernameIn;\n    maxLength = maxLengthIn;\n    langStrings = await getStrings(\n        [\n            {\n                key: 'startbutton-again',\n                component: 'digitala'\n            },\n            {\n                key: 'stopbutton',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-no_permissions',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-error',\n                component: 'digitala'\n\n            }\n        ]\n    );\n\n    if (pagenum !== 2) {\n        recButton.onclick = startRecording;\n        listenButton.onclick = listenRecording;\n    }\n};"],"names":["recorder","audio","langStrings","pagenum","assignmentId","userId","username","maxLength","timeout","interval","sec","recButton","document","getElementById","listenButton","startRecording","navigator","mediaDevices","enumerateDevices","label","getUserMedia","textContent","undefined","then","stream","options","audioBitsPerSecond","desiredSampRate","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","numberOfAudioChannels","disableLogs","window","console","log","innerHTML","onclick","stopRecording","disabled","setInterval","seconds","hours","minutes","second","Math","floor","setTimeout","catch","getState","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","form","FormData","append","mdlcfg","contextid","sesskey","Date","valueOf","req","XMLHttpRequest","open","wwwroot","addEventListener","event","target","readyState","forms","answerrecording","value","response","style","display","send","clearTimeout","clearInterval","listenRecording","microphoneIcon","play","border","initializeMicrophone","pagenumIn","assignmentIdIn","userIdIn","usernameIn","maxLengthIn","key","component"],"mappings":"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"}
=======
{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport RecordRTC from 'RecordRTC';\nimport mdlcfg from 'core/config';\n\nlet recorder;\nlet isRecording = false;\nlet audio;\n\nconst startStopRecording = (pagenum, assignmentId, userId, username) => {\n    switch (isRecording) {\n        case false:\n            navigator.mediaDevices.getUserMedia({audio: true})\n                .then(stream => {\n                    const options = {\n                        audioBitsPerSecond: 16000,\n                        type: 'audio',\n                        recorderType: RecordRTC.StereoAudioRecorder,\n                        mimeType: 'audio/wav',\n                        numberOfAudioChannels: 1\n                    };\n                    recorder = new RecordRTC(stream, options);\n                    isRecording = true;\n\n                    recorder.startRecording();\n\n                    return;\n                })\n                .catch((err) => {\n                    window.console.error(err);\n                });\n            break;\n\n        case true:\n            isRecording = false;\n            recorder.stopRecording(() => {\n                const audioBlob = recorder.getBlob();\n\n                const audioUrl = URL.createObjectURL(audioBlob);\n                audio = new Audio(audioUrl);\n\n                if (pagenum === 1) {\n                    const form = new FormData();\n                    form.append('repo_id', '5');\n                    form.append('ctx_id', mdlcfg.contextid);\n                    form.append('itemid', '0');\n                    form.append('savepath', '/');\n                    form.append('sesskey', mdlcfg.sesskey);\n                    form.append('repo_upload_file', audioBlob,\n                        `ans-${assignmentId}-${userId}-${username}-${new Date().valueOf()}.wav`);\n                    form.append('overwrite', '1');\n\n                    const req = new XMLHttpRequest();\n                    req.open('POST', mdlcfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n                    req.addEventListener('readystatechange', (event) => {\n                        document.forms.answerrecording[0].value = event.target.response;\n                        document.getElementById('submitModalButton').style.display = '';\n                    });\n                    req.send(form);\n                }\n            });\n            break;\n    }\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        microphoneIcon.style.border = '2.5px dashed green';\n    } else {\n        microphoneIcon.style.border = '2.5px dashed red';\n    }\n};\n\nexport const initializeMicrophone = (pagenum, assignmentId, userId, username) => {\n    if (pagenum !== 2) {\n        const recButton = document.getElementById('record');\n        const stopButton = document.getElementById('stopRecord');\n        const listenButton = document.getElementById('listenButton');\n        listenButton.disabled = true;\n\n        recButton.onclick = () => {\n            recButton.disabled = true;\n            stopButton.disabled = false;\n            listenButton.disabled = true;\n            recButton.style.display = 'none';\n            stopButton.style.display = 'inline-block';\n            startStopRecording(pagenum, assignmentId, userId, username);\n        };\n        stopButton.onclick = () => {\n            recButton.disabled = false;\n            stopButton.disabled = true;\n            listenButton.disabled = false;\n            recButton.style.display = 'inline-block';\n            stopButton.style.display = 'none';\n            startStopRecording(pagenum, assignmentId, userId, username);\n        };\n        listenButton.onclick = () => {\n            listenRecording();\n        };\n    }\n};"],"names":["recorder","audio","isRecording","startStopRecording","pagenum","assignmentId","userId","username","navigator","mediaDevices","getUserMedia","then","stream","options","audioBitsPerSecond","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","numberOfAudioChannels","startRecording","catch","err","window","console","error","stopRecording","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","form","FormData","append","mdlcfg","contextid","sesskey","Date","valueOf","req","XMLHttpRequest","open","wwwroot","addEventListener","event","document","forms","answerrecording","value","target","response","getElementById","style","display","send","recButton","stopButton","listenButton","disabled","onclick","microphoneIcon","undefined","play","border"],"mappings":";;;;;SASIA,gMAEAC,MADAC,aAAc,EAGZC,mBAAqB,SAACC,QAASC,aAAcC,OAAQC,iBAC/CL,kBACC,EACDM,UAAUC,aAAaC,aAAa,CAACT,OAAO,IACvCU,MAAK,SAAAC,YACIC,QAAU,CACZC,mBAAoB,KACpBC,KAAM,QACNC,aAAcC,mBAAUC,oBACxBC,SAAU,YACVC,sBAAuB,GAE3BpB,SAAW,IAAIiB,mBAAUL,OAAQC,SACjCX,aAAc,EAEdF,SAASqB,oBAIZC,OAAM,SAACC,KACJC,OAAOC,QAAQC,MAAMH,mBAI5B,EACDrB,aAAc,EACdF,SAAS2B,eAAc,eACbC,UAAY5B,SAAS6B,UAErBC,SAAWC,IAAIC,gBAAgBJ,cACrC3B,MAAQ,IAAIgC,MAAMH,UAEF,IAAZ1B,QAAe,KACT8B,KAAO,IAAIC,SACjBD,KAAKE,OAAO,UAAW,KACvBF,KAAKE,OAAO,SAAUC,gBAAOC,WAC7BJ,KAAKE,OAAO,SAAU,KACtBF,KAAKE,OAAO,WAAY,KACxBF,KAAKE,OAAO,UAAWC,gBAAOE,SAC9BL,KAAKE,OAAO,mBAAoBR,wBACrBvB,yBAAgBC,mBAAUC,sBAAY,IAAIiC,MAAOC,mBAC5DP,KAAKE,OAAO,YAAa,SAEnBM,IAAM,IAAIC,eAChBD,IAAIE,KAAK,OAAQP,gBAAOQ,QAAU,iDAClCH,IAAII,iBAAiB,oBAAoB,SAACC,OACtCC,SAASC,MAAMC,gBAAgB,GAAGC,MAAQJ,MAAMK,OAAOC,SACvDL,SAASM,eAAe,qBAAqBC,MAAMC,QAAU,MAEjEd,IAAIe,KAAKvB,0CAiBO,SAAC9B,QAASC,aAAcC,OAAQC,aAChD,IAAZH,QAAe,KACTsD,UAAYV,SAASM,eAAe,UACpCK,WAAaX,SAASM,eAAe,cACrCM,aAAeZ,SAASM,eAAe,gBAC7CM,aAAaC,UAAW,EAExBH,UAAUI,QAAU,WAChBJ,UAAUG,UAAW,EACrBF,WAAWE,UAAW,EACtBD,aAAaC,UAAW,EACxBH,UAAUH,MAAMC,QAAU,OAC1BG,WAAWJ,MAAMC,QAAU,eAC3BrD,mBAAmBC,QAASC,aAAcC,OAAQC,WAEtDoD,WAAWG,QAAU,WACjBJ,UAAUG,UAAW,EACrBF,WAAWE,UAAW,EACtBD,aAAaC,UAAW,EACxBH,UAAUH,MAAMC,QAAU,eAC1BG,WAAWJ,MAAMC,QAAU,OAC3BrD,mBAAmBC,QAASC,aAAcC,OAAQC,WAEtDqD,aAAaE,QAAU,WAjCP,IACdC,eAAAA,eAAiBf,SAASM,eAAe,0BACjCU,IAAV/D,OACAA,MAAMgE,OACNF,eAAeR,MAAMW,OAAS,sBAE9BH,eAAeR,MAAMW,OAAS"}
>>>>>>> main
