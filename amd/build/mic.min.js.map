{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint-disable no-nested-ternary */\n\nimport RecordRTC from 'RecordRTC';\nimport mdlcfg from 'core/config';\nimport {get_strings as getStrings} from 'core/str';\n\nlet recorder;\nconst recButton = document.getElementById('record');\nconst listenButton = document.getElementById('listen');\nlet audio;\nlet langStrings;\nlet pagenum;\nlet assignmentId;\nlet userId;\nlet username;\nlet maxLength;\nlet timeout;\nlet interval;\nlet sec;\n\nconst convertSecondsToString = (seconds) => {\n    let hours = Math.floor(seconds / 3600);\n    let minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    let second = Math.floor(seconds - (hours * 3600) - (minutes * 60));\n\n    hours = hours === 0\n        ? \"\"\n        : hours < 10\n            ? `0${hours}:`\n            : `${hours}:`;\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    second = second < 10 ? `0${second}` : `${second}`;\n\n    return `${hours}${minutes}:${second}`;\n};\n\nconst startRecording = async() => {\n    if (navigator.permissions) {\n        navigator.permissions.query({name: 'microphone'}).then(function (result) {\n            if (result.state == 'granted') {\n                return;\n            } else if (result.state == 'prompt') {\n                navigator.mediaDevices.getUserMedia({audio: true});\n                recButton.textContent = langStrings[2];\n                return;\n            } else if (result.state == 'denied') {\n                recButton.textContent = langStrings[3];\n                return;\n            }\n          });\n\n    } else {\n        const notGranted = (await navigator.mediaDevices.enumerateDevices())[0].label === \"\";\n        if (notGranted) {\n            try {\n                navigator.mediaDevices.getUserMedia({audio: true});\n                recButton.textContent = langStrings[2];\n                return;\n            } catch {\n                recButton.textContent = langStrings[3];\n                return;\n            }\n        }\n    }\n\n    clearTimeout(timeout);\n    clearInterval(interval);\n\n\n\n    if (navigator.mediaDevices !== undefined) {\n        navigator.mediaDevices.getUserMedia({audio: true})\n        .then(stream => {\n            const options = {\n                audioBitsPerSecond: 16000,\n                desiredSampRate: 16000,\n                type: 'audio',\n                recorderType: RecordRTC.StereoAudioRecorder,\n                mimeType: 'audio/wav',\n                numberOfAudioChannels: 1,\n                disableLogs: true\n            };\n            recorder = new RecordRTC(stream, options);\n\n            recorder.startRecording();\n            window.console.log('Digitala: Started to record');\n\n            recButton.innerHTML = \"<span>\" + langStrings[1] + \"</span> \" + document.getElementById('stopIcon').innerHTML;\n            recButton.onclick = stopRecording;\n            listenButton.disabled = true;\n\n            sec = 0;\n            interval = setInterval(() => {\n                sec += 1;\n                document.getElementById('recordingLength').textContent = convertSecondsToString(sec);\n            }, 1000);\n\n            if (pagenum == 1) {\n                let timeoutLenght = maxLength * 1000;\n                if (maxLength !== 0) {\n                    timeout = setTimeout(() => {\n                        stopRecording();\n                    }, timeoutLenght);\n                }\n            }\n            return;\n        })\n        .catch(() => {\n            recButton.textContent = langStrings[3];\n        });\n    } else {\n        recButton.textContent = langStrings[3];\n        return;\n    }\n};\n\nconst stopRecording = () => {\n    if (recorder.getState() === \"recording\") {\n\n        recorder.stopRecording(() => {\n            clearTimeout(timeout);\n            clearInterval(interval);\n            const audioBlob = recorder.getBlob();\n            const audioUrl = URL.createObjectURL(audioBlob);\n            audio = new Audio(audioUrl);\n\n            if (pagenum === 1) {\n                const form = new FormData();\n                form.append('repo_id', '5');\n                form.append('ctx_id', mdlcfg.contextid);\n                form.append('itemid', '0');\n                form.append('savepath', '/');\n                form.append('sesskey', mdlcfg.sesskey);\n                form.append('repo_upload_file', audioBlob,\n                    `ans-${assignmentId}-${userId}-${username}-${new Date().valueOf()}.wav`);\n                form.append('overwrite', '1');\n\n                const req = new XMLHttpRequest();\n                req.open('POST', mdlcfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n                req.addEventListener('readystatechange', (event) => {\n                    if (event.target.readyState === 4) {\n                        document.forms.answerrecording[0].value = event.target.response;\n                        document.forms.answerrecording[1].value = sec;\n                        document.getElementById('submitModalButton').style.display = '';\n                    }\n                });\n                req.send(form);\n            }\n            recButton.innerHTML = \"<span>\" + langStrings[0] + \"</span> \" + document.getElementById('startIcon').innerHTML;\n            recButton.onclick = startRecording;\n            listenButton.disabled = false;\n        });\n        window.console.log('Digitala: Recording stopped');\n    }\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed green';\n        }\n\n    } else {\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed red';\n        }\n    }\n};\n\nexport const initializeMicrophone = async(pagenumIn, assignmentIdIn, userIdIn, usernameIn, maxLengthIn) => {\n    window.console.log('Digitala: Starting to initalize microphones');\n\n    pagenum = pagenumIn;\n    assignmentId = assignmentIdIn;\n    userId = userIdIn;\n    username = usernameIn;\n    maxLength = maxLengthIn;\n    langStrings = await getStrings(\n        [\n            {\n                key: 'startbutton-again',\n                component: 'digitala'\n            },\n            {\n                key: 'stopbutton',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-no_permissions',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-error',\n                component: 'digitala'\n\n            }\n        ]\n    );\n\n    if (pagenum !== 2) {\n        recButton.onclick = startRecording;\n        listenButton.onclick = listenRecording;\n    }\n};"],"names":["recorder","audio","langStrings","pagenum","assignmentId","userId","username","maxLength","timeout","interval","sec","recButton","document","getElementById","listenButton","startRecording","navigator","permissions","query","name","then","result","state","mediaDevices","getUserMedia","textContent","enumerateDevices","label","clearTimeout","clearInterval","undefined","stream","options","audioBitsPerSecond","desiredSampRate","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","numberOfAudioChannels","disableLogs","window","console","log","innerHTML","onclick","stopRecording","disabled","setInterval","seconds","hours","minutes","second","Math","floor","setTimeout","catch","getState","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","form","FormData","append","mdlcfg","contextid","sesskey","Date","valueOf","req","XMLHttpRequest","open","wwwroot","addEventListener","event","target","readyState","forms","answerrecording","value","response","style","display","send","listenRecording","microphoneIcon","play","border","initializeMicrophone","pagenumIn","assignmentIdIn","userIdIn","usernameIn","maxLengthIn","key","component"],"mappings":"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"}