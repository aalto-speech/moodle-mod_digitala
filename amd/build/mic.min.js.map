{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport RecordRTC from 'RecordRTC';\n\nlet recorder;\nlet isRecording = false;\nlet audio;\n\nconst startStopRecording = (pagenum) => {\n    switch (isRecording) {\n        case false:\n            navigator.mediaDevices.getUserMedia({audio: true})\n                .then(stream => {\n                    const options = {\n                        audioBitsPerSecond: 16000,\n                        type: 'audio',\n                        recorderType: RecordRTC.StereoAudioRecorder,\n                        mimeType: 'audio/wav'\n                    };\n                    recorder = new RecordRTC(stream, options);\n                    isRecording = true;\n\n                    recorder.startRecording();\n                    window.console.log('started to record');\n\n                    return;\n                })\n                .catch((err) => {\n                    window.console.error(err);\n                });\n            break;\n\n        case true:\n            isRecording = false;\n            recorder.stopRecording(() => {\n                const audioBlob = recorder.getBlob();\n                window.console.log('audioBlob:', audioBlob);\n\n                const audioUrl = URL.createObjectURL(audioBlob);\n                audio = new Audio(audioUrl);\n                window.console.log('audioUrl', audioUrl);\n\n                window.console.log('Enable submit button');\n                document.getElementById('id_submitbutton').style.display = '';\n\n                if (pagenum === 1) {\n                    let reader = new FileReader();\n                    reader.readAsDataURL(audioBlob);\n\n                    reader.onload = () => {\n                        window.console.log('>', reader.result);\n                        document.forms.answerrecording[0].value = reader.result;\n                    };\n                }\n            });\n            window.console.log('recording stopped');\n            break;\n    }\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        microphoneIcon.style.border = '2.5px dashed green';\n    } else {\n        microphoneIcon.style.border = '2.5px dashed red';\n    }\n};\n\nexport const initializeMicrophone = (pagenum) => {\n    const recButton = document.getElementById('record');\n    const stopButton = document.getElementById('stopRecord');\n    const listenButton = document.getElementById('listenButton');\n    listenButton.disabled = true;\n\n    window.console.log('page number', pagenum);\n\n    recButton.onclick = () => {\n        recButton.disabled = true;\n        stopButton.disabled = false;\n        listenButton.disabled = true;\n        recButton.style.display = 'none';\n        stopButton.style.display = 'inline-block';\n        startStopRecording(pagenum);\n    };\n    stopButton.onclick = () => {\n        recButton.disabled = false;\n        stopButton.disabled = true;\n        listenButton.disabled = false;\n        recButton.style.display = 'inline-block';\n        stopButton.style.display = 'none';\n        startStopRecording(pagenum);\n    };\n    listenButton.onclick = () => {\n        listenRecording();\n    };\n};"],"names":["recorder","audio","isRecording","startStopRecording","pagenum","navigator","mediaDevices","getUserMedia","then","stream","options","audioBitsPerSecond","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","startRecording","window","console","log","catch","err","error","stopRecording","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","document","getElementById","style","display","reader","FileReader","readAsDataURL","onload","result","forms","answerrecording","value","recButton","stopButton","listenButton","disabled","onclick","microphoneIcon","undefined","play","border"],"mappings":"yFAQIA;;;;;oKAEAC,MADAC,aAAc,EAGZC,mBAAqB,SAACC,gBAChBF,kBACC,EACDG,UAAUC,aAAaC,aAAa,CAACN,OAAO,IACvCO,MAAK,SAAAC,YACIC,QAAU,CACZC,mBAAoB,KACpBC,KAAM,QACNC,aAAcC,mBAAUC,oBACxBC,SAAU,aAEdhB,SAAW,IAAIc,mBAAUL,OAAQC,SACjCR,aAAc,EAEdF,SAASiB,iBACTC,OAAOC,QAAQC,IAAI,wBAItBC,OAAM,SAACC,KACJJ,OAAOC,QAAQI,MAAMD,mBAI5B,EACDpB,aAAc,EACdF,SAASwB,eAAc,eACbC,UAAYzB,SAAS0B,UAC3BR,OAAOC,QAAQC,IAAI,aAAcK,eAE3BE,SAAWC,IAAIC,gBAAgBJ,cACrCxB,MAAQ,IAAI6B,MAAMH,UAClBT,OAAOC,QAAQC,IAAI,WAAYO,UAE/BT,OAAOC,QAAQC,IAAI,wBACnBW,SAASC,eAAe,mBAAmBC,MAAMC,QAAU,GAE3C,IAAZ9B,QAAe,KACX+B,OAAS,IAAIC,WACjBD,OAAOE,cAAcZ,WAErBU,OAAOG,OAAS,WACZpB,OAAOC,QAAQC,IAAI,IAAKe,OAAOI,QAC/BR,SAASS,MAAMC,gBAAgB,GAAGC,MAAQP,OAAOI,YAI7DrB,OAAOC,QAAQC,IAAI,qDAeK,SAAChB,aAC3BuC,UAAYZ,SAASC,eAAe,UACpCY,WAAab,SAASC,eAAe,cACrCa,aAAed,SAASC,eAAe,gBAC7Ca,aAAaC,UAAW,EAExB5B,OAAOC,QAAQC,IAAI,cAAehB,SAElCuC,UAAUI,QAAU,WAChBJ,UAAUG,UAAW,EACrBF,WAAWE,UAAW,EACtBD,aAAaC,UAAW,EACxBH,UAAUV,MAAMC,QAAU,OAC1BU,WAAWX,MAAMC,QAAU,eAC3B/B,mBAAmBC,UAEvBwC,WAAWG,QAAU,WACjBJ,UAAUG,UAAW,EACrBF,WAAWE,UAAW,EACtBD,aAAaC,UAAW,EACxBH,UAAUV,MAAMC,QAAU,eAC1BU,WAAWX,MAAMC,QAAU,OAC3B/B,mBAAmBC,UAEvByC,aAAaE,QAAU,WAlCH,IACdC,eAAAA,eAAiBjB,SAASC,eAAe,0BACjCiB,IAAVhD,OACAA,MAAMiD,OACNF,eAAef,MAAMkB,OAAS,sBAE9BH,eAAef,MAAMkB,OAAS"}