{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport RecordRTC from 'RecordRTC';\nimport mdlcfg from 'core/config';\nimport {get_strings as getStrings} from 'core/str';\n\nlet recorder;\nconst recButton = document.getElementById('record');\nconst listenButton = document.getElementById('listen');\nlet audio;\nlet langStrings;\nlet pagenum;\nlet assignmentId;\nlet userId;\nlet username;\nlet maxLength;\nlet timeout;\n\nconst startRecording = () => {\n    navigator.mediaDevices.getUserMedia({audio: true})\n    .then(stream => {\n        const options = {\n            audioBitsPerSecond: 16000,\n            type: 'audio',\n            recorderType: RecordRTC.StereoAudioRecorder,\n            mimeType: 'audio/wav',\n            numberOfAudioChannels: 1\n        };\n        recorder = new RecordRTC(stream, options);\n\n        recorder.startRecording();\n        window.console.log('Digitala: Started to record');\n\n        recButton.textContent = langStrings[1];\n        recButton.onclick = stopRecording;\n        listenButton.disabled = true;\n\n        timeout = setTimeout(stopRecording, maxLength * 100);\n        return;\n    })\n    .catch((err) => {\n        window.console.error(err);\n    });\n};\n\nconst stopRecording = () => {\n    if (recorder.getState() === \"recording\") {\n        recorder.stopRecording(() => {\n            const audioBlob = recorder.getBlob();\n            const audioUrl = URL.createObjectURL(audioBlob);\n            audio = new Audio(audioUrl);\n\n            if (pagenum === 1) {\n                const form = new FormData();\n                form.append('repo_id', '5');\n                form.append('ctx_id', mdlcfg.contextid);\n                form.append('itemid', '0');\n                form.append('savepath', '/');\n                form.append('sesskey', mdlcfg.sesskey);\n                form.append('repo_upload_file', audioBlob,\n                    `ans-${assignmentId}-${userId}-${username}-${new Date().valueOf()}.wav`);\n                form.append('overwrite', '1');\n\n                const req = new XMLHttpRequest();\n                req.open('POST', mdlcfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n                req.addEventListener('readystatechange', (event) => {\n                    if (event.target.readyState === 4) {\n                        document.forms.answerrecording[0].value = event.target.response;\n                        document.getElementById('id_submitbutton').style.display = '';\n                    }\n                });\n                req.send(form);\n            }\n            recButton.textContent = langStrings[0];\n            recButton.onclick = startRecording;\n            listenButton.disabled = false;\n            clearTimeout(timeout);\n        });\n        window.console.log('Digitala: Recording stopped');\n    }\n\n\n\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed green';\n        }\n\n    } else {\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed red';\n        }\n\n    }\n};\n\nexport const initializeMicrophone = async(pagenumIn, assignmentIdIn, userIdIn, usernameIn, maxLengthIn) => {\n    window.console.log('Digitala: Starting to initalize microphones');\n\n    pagenum = pagenumIn;\n    assignmentId = assignmentIdIn;\n    userId = userIdIn;\n    username = usernameIn;\n    maxLength = maxLengthIn;\n    langStrings = await getStrings(\n        [\n            {\n                key: 'startbutton-again',\n                component: 'digitala'\n            },\n            {\n                key: 'stopbutton',\n                component: 'digitala'\n\n            }\n        ]\n    );\n\n    if (pagenum !== 2) {\n        recButton.onclick = startRecording;\n        listenButton.onclick = listenRecording;\n    }\n};"],"names":["recorder","audio","langStrings","pagenum","assignmentId","userId","username","maxLength","timeout","recButton","document","getElementById","listenButton","startRecording","navigator","mediaDevices","getUserMedia","then","stream","options","audioBitsPerSecond","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","numberOfAudioChannels","window","console","log","textContent","onclick","stopRecording","disabled","setTimeout","catch","err","error","getState","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","form","FormData","append","mdlcfg","contextid","sesskey","Date","valueOf","req","XMLHttpRequest","open","wwwroot","addEventListener","event","target","readyState","forms","answerrecording","value","response","style","display","send","clearTimeout","listenRecording","microphoneIcon","undefined","play","border","initializeMicrophone","pagenumIn","assignmentIdIn","userIdIn","usernameIn","maxLengthIn","key","component"],"mappings":"waAUIA,gMAGAC,MACAC,YACAC,QACAC,aACAC,OACAC,SACAC,UACAC,gBATEC,UAAYC,SAASC,eAAe,UACpCC,aAAeF,SAASC,eAAe,UAUvCE,eAAiB,WACnBC,UAAUC,aAAaC,aAAa,CAACf,OAAO,IAC3CgB,MAAK,SAAAC,YACIC,QAAU,CACZC,mBAAoB,KACpBC,KAAM,QACNC,aAAcC,mBAAUC,oBACxBC,SAAU,YACVC,sBAAuB,IAE3B1B,SAAW,IAAIuB,mBAAUL,OAAQC,UAExBN,iBACTc,OAAOC,QAAQC,IAAI,+BAEnBpB,UAAUqB,YAAc5B,YAAY,GACpCO,UAAUsB,QAAUC,cACpBpB,aAAaqB,UAAW,EAExBzB,QAAU0B,WAAWF,cAA2B,IAAZzB,cAGvC4B,OAAM,SAACC,KACJT,OAAOC,QAAQS,MAAMD,SAIvBJ,cAAgB,WACU,cAAxBhC,SAASsC,aACTtC,SAASgC,eAAc,eACbO,UAAYvC,SAASwC,UACrBC,SAAWC,IAAIC,gBAAgBJ,cACrCtC,MAAQ,IAAI2C,MAAMH,UAEF,IAAZtC,QAAe,KACT0C,KAAO,IAAIC,SACjBD,KAAKE,OAAO,UAAW,KACvBF,KAAKE,OAAO,SAAUC,gBAAOC,WAC7BJ,KAAKE,OAAO,SAAU,KACtBF,KAAKE,OAAO,WAAY,KACxBF,KAAKE,OAAO,UAAWC,gBAAOE,SAC9BL,KAAKE,OAAO,mBAAoBR,wBACrBnC,yBAAgBC,mBAAUC,sBAAY,IAAI6C,MAAOC,mBAC5DP,KAAKE,OAAO,YAAa,SAEnBM,IAAM,IAAIC,eAChBD,IAAIE,KAAK,OAAQP,gBAAOQ,QAAU,iDAClCH,IAAII,iBAAiB,oBAAoB,SAACC,OACN,IAA5BA,MAAMC,OAAOC,aACblD,SAASmD,MAAMC,gBAAgB,GAAGC,MAAQL,MAAMC,OAAOK,SACvDtD,SAASC,eAAe,mBAAmBsD,MAAMC,QAAU,OAGnEb,IAAIc,KAAKtB,MAEbpC,UAAUqB,YAAc5B,YAAY,GACpCO,UAAUsB,QAAUlB,eACpBD,aAAaqB,UAAW,EACxBmC,aAAa5D,YAEjBmB,OAAOC,QAAQC,IAAI,iCAOrBwC,gBAAkB,eACdC,eAAiB5D,SAASC,eAAe,0BACjC4D,IAAVtE,OACAA,MAAMuE,OACU,IAAZrE,UACAmE,eAAeL,MAAMQ,OAAS,uBAIlB,IAAZtE,UACAmE,eAAeL,MAAMQ,OAAS,qBAM7BC,kDAAuB,iBAAMC,UAAWC,eAAgBC,SAAUC,WAAYC,yHACvFpD,OAAOC,QAAQC,IAAI,+CAEnB1B,QAAUwE,UACVvE,aAAewE,eACfvE,OAASwE,SACTvE,SAAWwE,WACXvE,UAAYwE,6BACQ,oBAChB,CACI,CACIC,IAAK,oBACLC,UAAW,YAEf,CACID,IAAK,aACLC,UAAW,qBARvB/E,0BAcgB,IAAZC,UACAM,UAAUsB,QAAUlB,eACpBD,aAAamB,QAAUsC"}