{"version":3,"file":"mic.min.js","sources":["../src/mic.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint-disable no-nested-ternary */\n\nimport RecordRTC from 'RecordRTC';\nimport mdlcfg from 'core/config';\nimport {get_strings as getStrings} from 'core/str';\n\nlet recorder;\nconst recButton = document.getElementById('record');\nconst listenButton = document.getElementById('listen');\nlet audio;\nlet langStrings;\nlet pagenum;\nlet assignmentId;\nlet userId;\nlet username;\nlet maxLength;\nlet timeout;\nlet interval;\nlet sec;\n\nconst convertSecondsToString = (seconds) => {\n    let hours = Math.floor(seconds / 3600);\n    let minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    let second = Math.floor(seconds - (hours * 3600) - (minutes * 60));\n\n    hours = hours === 0\n        ? \"\"\n        : hours < 10\n            ? `0${hours}:`\n            : `${hours}:`;\n    minutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    second = second < 10 ? `0${second}` : `${second}`;\n\n    return `${hours}${minutes}:${second}`;\n};\n\nconst startRecording = async() => {\n    const notGranted = (await navigator.mediaDevices.enumerateDevices())[0].label === \"\";\n\n    clearTimeout(timeout);\n    clearInterval(interval);\n\n    if (notGranted) {\n        try {\n            navigator.mediaDevices.getUserMedia({audio: true});\n            recButton.textContent = langStrings[2];\n            return;\n        } catch {\n            recButton.textContent = langStrings[3];\n            return;\n        }\n    }\n\n    if (navigator.mediaDevices !== undefined) {\n        navigator.mediaDevices.getUserMedia({audio: true})\n        .then(stream => {\n            const options = {\n                audioBitsPerSecond: 16000,\n                desiredSampRate: 16000,\n                type: 'audio',\n                recorderType: RecordRTC.StereoAudioRecorder,\n                mimeType: 'audio/wav',\n                numberOfAudioChannels: 1,\n                disableLogs: true\n            };\n            recorder = new RecordRTC(stream, options);\n\n            recorder.startRecording();\n            window.console.log('Digitala: Started to record');\n\n            recButton.innerHTML = \"<span>\" + langStrings[1] + \"</span> \" + document.getElementById('stopIcon').innerHTML;\n            recButton.onclick = stopRecording;\n            listenButton.disabled = true;\n\n            sec = 0;\n            interval = setInterval(() => {\n                sec += 1;\n                document.getElementById('recordingLength').textContent = convertSecondsToString(sec);\n            }, 1000);\n\n            if (pagenum == 1) {\n                let timeoutLenght = maxLength * 1000;\n                if (maxLength !== 0) {\n                    timeout = setTimeout(() => {\n                        stopRecording();\n                    }, timeoutLenght);\n                }\n            }\n            return;\n        })\n        .catch(() => {\n            recButton.textContent = langStrings[3];\n        });\n    } else {\n        recButton.textContent = langStrings[3];\n        return;\n    }\n};\n\nconst stopRecording = () => {\n    if (recorder.getState() === \"recording\") {\n\n        recorder.stopRecording(() => {\n            clearTimeout(timeout);\n            clearInterval(interval);\n            const audioBlob = recorder.getBlob();\n            const audioUrl = URL.createObjectURL(audioBlob);\n            audio = new Audio(audioUrl);\n\n            if (pagenum === 1) {\n                const form = new FormData();\n                form.append('repo_id', '5');\n                form.append('ctx_id', mdlcfg.contextid);\n                form.append('itemid', '0');\n                form.append('savepath', '/');\n                form.append('sesskey', mdlcfg.sesskey);\n                form.append('repo_upload_file', audioBlob,\n                    `ans-${assignmentId}-${userId}-${username}-${new Date().valueOf()}.wav`);\n                form.append('overwrite', '1');\n\n                const req = new XMLHttpRequest();\n                req.open('POST', mdlcfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n                req.addEventListener('readystatechange', (event) => {\n                    if (event.target.readyState === 4) {\n                        document.forms.answerrecording[0].value = event.target.response;\n                        document.forms.answerrecording[1].value = sec;\n                        document.getElementById('submitModalButton').style.display = '';\n                    }\n                });\n                req.send(form);\n            }\n            recButton.innerHTML = \"<span>\" + langStrings[0] + \"</span> \" + document.getElementById('startIcon').innerHTML;\n            recButton.onclick = startRecording;\n            listenButton.disabled = false;\n        });\n        window.console.log('Digitala: Recording stopped');\n    }\n};\n\nconst listenRecording = () => {\n    const microphoneIcon = document.getElementById('microphoneIconBox');\n    if (audio !== undefined) {\n        audio.play();\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed green';\n        }\n\n    } else {\n        if (pagenum === 0) {\n            microphoneIcon.style.border = '2.5px dashed red';\n        }\n    }\n};\n\nexport const initializeMicrophone = async(pagenumIn, assignmentIdIn, userIdIn, usernameIn, maxLengthIn) => {\n    window.console.log('Digitala: Starting to initalize microphones');\n\n    pagenum = pagenumIn;\n    assignmentId = assignmentIdIn;\n    userId = userIdIn;\n    username = usernameIn;\n    maxLength = maxLengthIn;\n    langStrings = await getStrings(\n        [\n            {\n                key: 'startbutton-again',\n                component: 'digitala'\n            },\n            {\n                key: 'stopbutton',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-no_permissions',\n                component: 'digitala'\n\n            },\n            {\n                key: 'startbutton-error',\n                component: 'digitala'\n\n            }\n        ]\n    );\n\n    if (pagenum !== 2) {\n        recButton.onclick = startRecording;\n        listenButton.onclick = listenRecording;\n    }\n};"],"names":["recorder","audio","langStrings","pagenum","assignmentId","userId","username","maxLength","timeout","interval","sec","recButton","document","getElementById","listenButton","startRecording","navigator","mediaDevices","enumerateDevices","label","notGranted","clearTimeout","clearInterval","getUserMedia","textContent","undefined","then","stream","options","audioBitsPerSecond","desiredSampRate","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","numberOfAudioChannels","disableLogs","window","console","log","innerHTML","onclick","stopRecording","disabled","setInterval","seconds","hours","minutes","second","Math","floor","setTimeout","catch","getState","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","form","FormData","append","mdlcfg","contextid","sesskey","Date","valueOf","req","XMLHttpRequest","open","wwwroot","addEventListener","event","target","readyState","forms","answerrecording","value","response","style","display","send","listenRecording","microphoneIcon","play","border","initializeMicrophone","pagenumIn","assignmentIdIn","userIdIn","usernameIn","maxLengthIn","key","component"],"mappings":"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"}