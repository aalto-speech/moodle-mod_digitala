{"version":3,"sources":["../src/mic.js"],"names":["recorder","isRecording","audio","startStopRecording","pagenum","navigator","mediaDevices","getUserMedia","then","stream","options","audioBitsPerSecond","type","recorderType","RecordRTC","StereoAudioRecorder","mimeType","startRecording","window","console","log","catch","err","error","stopRecording","audioBlob","getBlob","audioUrl","URL","createObjectURL","Audio","reader","FileReader","readAsDataURL","onload","result","document","forms","answerrecording","value","listenRecording","play","initializeMicrophone","recButton","getElementById","stopButton","listenButton","disabled","onclick","style","backgroundColor","display"],"mappings":"6JAMA,uD,GAEIA,CAAAA,C,CACAC,CAAW,G,CACXC,C,CAEEC,CAAkB,CAAG,SAACC,CAAD,CAAa,CACpC,OAAQH,CAAR,EACI,OACII,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC,CAACL,KAAK,GAAN,CAApC,EACKM,IADL,CACU,SAAAC,CAAM,CAAI,CACZ,GAAMC,CAAAA,CAAO,CAAG,CACZC,kBAAkB,CAAE,IADR,CAEZC,IAAI,CAAE,OAFM,CAGZC,YAAY,CAAEC,UAAUC,mBAHZ,CAIZC,QAAQ,CAAE,WAJE,CAAhB,CAMAhB,CAAQ,CAAG,GAAIc,UAAJ,CAAcL,CAAd,CAAsBC,CAAtB,CAAX,CACAT,CAAW,GAAX,CAEAD,CAAQ,CAACiB,cAAT,GACAC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,mBAAnB,CAGH,CAfL,EAgBKC,KAhBL,CAgBW,SAACC,CAAD,CAAS,CACZJ,MAAM,CAACC,OAAP,CAAeI,KAAf,CAAqBD,CAArB,CACH,CAlBL,EAmBA,MAEJ,OACIrB,CAAW,GAAX,CACAD,CAAQ,CAACwB,aAAT,CAAuB,UAAM,CACzB,GAAMC,CAAAA,CAAS,CAAGzB,CAAQ,CAAC0B,OAAT,EAAlB,CACAR,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,YAAnB,CAAiCK,CAAjC,EAEA,GAAME,CAAAA,CAAQ,CAAGC,GAAG,CAACC,eAAJ,CAAoBJ,CAApB,CAAjB,CACAvB,CAAK,CAAG,GAAI4B,CAAAA,KAAJ,CAAUH,CAAV,CAAR,CACAT,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,UAAnB,CAA+BO,CAA/B,EAEA,GAAgB,CAAZ,GAAAvB,CAAJ,CAAmB,CACf,GAAI2B,CAAAA,CAAM,CAAG,GAAIC,CAAAA,UAAjB,CACAD,CAAM,CAACE,aAAP,CAAqBR,CAArB,EAEAM,CAAM,CAACG,MAAP,CAAgB,UAAM,CAClBhB,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,GAAnB,CAAwBW,CAAM,CAACI,MAA/B,EACAC,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+B,CAA/B,EAAkCC,KAAlC,CAA0CR,CAAM,CAACI,MACpD,CACJ,CACJ,CAjBD,EAkBAjB,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,mBAAnB,EACA,MA5CR,CA8CH,C,CAEKoB,CAAe,CAAG,UAAM,CAC1B,GAAItC,CAAK,SAAT,CAAyB,CACrBA,CAAK,CAACuC,IAAN,EACH,CACJ,C,wBAEmC,QAAvBC,CAAAA,oBAAuB,CAACtC,CAAD,CAAa,IACvCuC,CAAAA,CAAS,CAAGP,QAAQ,CAACQ,cAAT,CAAwB,QAAxB,CAD2B,CAEvCC,CAAU,CAAGT,QAAQ,CAACQ,cAAT,CAAwB,YAAxB,CAF0B,CAGvCE,CAAY,CAAGV,QAAQ,CAACQ,cAAT,CAAwB,cAAxB,CAHwB,CAI7CC,CAAU,CAACE,QAAX,IACAD,CAAY,CAACC,QAAb,IAEA7B,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,aAAnB,CAAkChB,CAAlC,EAEAuC,CAAS,CAACK,OAAV,CAAoB,UAAM,CACtBL,CAAS,CAACM,KAAV,CAAgBC,eAAhB,CAAkC,MAAlC,CACAP,CAAS,CAACI,QAAV,IACAF,CAAU,CAACE,QAAX,IACAD,CAAY,CAACG,KAAb,CAAmBE,OAAnB,CAA6B,MAA7B,CACAhD,CAAkB,CAACC,CAAD,CACrB,CAND,CAOAyC,CAAU,CAACG,OAAX,CAAqB,UAAM,CACvBL,CAAS,CAACM,KAAV,CAAgBC,eAAhB,CAAkC,KAAlC,CACAP,CAAS,CAACI,QAAV,IACAF,CAAU,CAACE,QAAX,IACAD,CAAY,CAACC,QAAb,IACAD,CAAY,CAACG,KAAb,CAAmBE,OAAnB,CAA6B,cAA7B,CACAhD,CAAkB,CAACC,CAAD,CACrB,CAPD,CAQA0C,CAAY,CAACE,OAAb,CAAuB,UAAM,CACzBR,CAAe,EAClB,CACJ,C","sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport RecordRTC from 'RecordRTC';\n\nlet recorder;\nlet isRecording = false;\nlet audio;\n\nconst startStopRecording = (pagenum) => {\n    switch (isRecording) {\n        case false:\n            navigator.mediaDevices.getUserMedia({audio: true})\n                .then(stream => {\n                    const options = {\n                        audioBitsPerSecond: 16000,\n                        type: 'audio',\n                        recorderType: RecordRTC.StereoAudioRecorder,\n                        mimeType: 'audio/wav'\n                    };\n                    recorder = new RecordRTC(stream, options);\n                    isRecording = true;\n\n                    recorder.startRecording();\n                    window.console.log('started to record');\n\n                    return;\n                })\n                .catch((err) => {\n                    window.console.error(err);\n                });\n            break;\n\n        case true:\n            isRecording = false;\n            recorder.stopRecording(() => {\n                const audioBlob = recorder.getBlob();\n                window.console.log('audioBlob:', audioBlob);\n\n                const audioUrl = URL.createObjectURL(audioBlob);\n                audio = new Audio(audioUrl);\n                window.console.log('audioUrl', audioUrl);\n\n                if (pagenum === 1) {\n                    let reader = new FileReader();\n                    reader.readAsDataURL(audioBlob);\n\n                    reader.onload = () => {\n                        window.console.log('>', reader.result);\n                        document.forms.answerrecording[0].value = reader.result;\n                    };\n                }\n            });\n            window.console.log('recording stopped');\n            break;\n    }\n};\n\nconst listenRecording = () => {\n    if (audio !== undefined) {\n        audio.play();\n    }\n};\n\nexport const initializeMicrophone = (pagenum) => {\n    const recButton = document.getElementById('record');\n    const stopButton = document.getElementById('stopRecord');\n    const listenButton = document.getElementById('listenButton');\n    stopButton.disabled = true;\n    listenButton.disabled = true;\n\n    window.console.log('page number', pagenum);\n\n    recButton.onclick = () => {\n        recButton.style.backgroundColor = \"blue\";\n        recButton.disabled = true;\n        stopButton.disabled = false;\n        listenButton.style.display = 'none';\n        startStopRecording(pagenum);\n    };\n    stopButton.onclick = () => {\n        recButton.style.backgroundColor = \"red\";\n        recButton.disabled = false;\n        stopButton.disabled = true;\n        listenButton.disabled = false;\n        listenButton.style.display = 'inline-block';\n        startStopRecording(pagenum);\n    };\n    listenButton.onclick = () => {\n        listenRecording();\n    };\n};"],"file":"mic.min.js"}