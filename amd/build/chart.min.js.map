{"version":3,"file":"chart.min.js","sources":["../src/chart.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport chart from 'chart';\nimport {get_strings as getStrings} from 'core/str';\n\n\nconst createChart = async(id, grade, maxgrade) => {\n    const horLine = {\n        afterDraw: (chart) => {\n            const ctx = chart.ctx;\n            ctx.lineWidth = 3.5;\n            const scale = chart.chartArea.width / maxgrade;\n            const curr = chart.config._config.options.lineAt;\n            const place = chart.chartArea.left + (scale * curr);\n\n            ctx.strokeStyle = '#ffb000';\n            ctx.beginPath();\n            ctx.moveTo(place, chart.chartArea.top);\n            ctx.lineTo(place, chart.chartArea.bottom);\n            ctx.closePath();\n            ctx.stroke();\n        }\n    };\n\n    const kaavio = document.getElementById(id).getContext('2d');\n\n    let strings = [];\n    let basicDataset = [];\n    for (let i = 0; i <= maxgrade; i++) {\n        strings = [...strings, {\n            key: `${id}_score-${i}`,\n            component: 'digitala'\n        }];\n        if (i >= 1) {\n            basicDataset = [...basicDataset, {\n                type: 'bar',\n                label: 'noshow',\n                data: [1],\n                backgroundColor: i % 2 ? 'rgba(182, 182, 182, 0.3)' : 'rgba(123, 123, 123, 0.3)'\n            }];\n        }\n    }\n\n    let lineSet = [];\n    const evalStrings = await getStrings(strings);\n    for (let i = 0; i < evalStrings.length; i++) {\n        const evalString = evalStrings[i];\n        const length = i === 0 ? 0 : 1;\n        lineSet = [...lineSet,\n            {\n                type: 'line',\n                label: evalString,\n                data: [length],\n                backgroundColor: 'rgba(0, 0, 0, 1)',\n                showLine: true,\n                pointRadius: 12.5,\n            }\n        ];\n    }\n\n    const selectedDataset = [\n        ...lineSet,\n        ...basicDataset,\n    ];\n\n    new chart.Chart(kaavio, {\n        type: 'bar',\n        data: {\n            labels: [''],\n            datasets: selectedDataset\n        },\n        plugins: [horLine],\n        options: {\n            plugins: {\n                legend: {\n                    display: false\n                },\n                tooltip: {\n                    enabled: false,\n                    external: (tooltipModel) => {\n                        const name = tooltipModel.chart.canvas.attributes['data-eval-name'].value;\n                        const tooltip = tooltipModel.tooltip;\n                        const getBody = (bodyItem) => {\n                            return bodyItem.lines;\n                        };\n                        let tooltipBox = document.getElementById(`grade-tooltip-${name}`);\n\n                        if (!tooltipBox) {\n                            tooltipBox = document.createElement('div');\n                            tooltipBox.classList.add('tooltip-box');\n                            tooltipBox.id = `grade-tooltip-${name}`;\n                            document.body.appendChild(tooltipBox);\n                        }\n\n                        if (tooltip.body) {\n                            const bodyLines = tooltip.body.map(getBody);\n                            if (bodyLines[0][0].split(':')[0] === 'noshow') {\n                                tooltipBox.style.opacity = 0;\n                                return;\n                            }\n                        }\n\n                        if (tooltip.opacity === 0) {\n                            tooltipBox.style.opacity = 0;\n                            return;\n                        }\n\n                        tooltipBox.classList.remove('above', 'below', 'no-transform');\n                        if (tooltip.yAlign) {\n                            tooltipBox.classList.add(tooltip.yAlign);\n                        } else {\n                            tooltipBox.classList.add('no-transform');\n                        }\n\n                        if (tooltip.body) {\n                            const bodyLines = tooltip.body.map(getBody);\n\n                            bodyLines.forEach((body) => {\n                                tooltipBox.innerHTML = '<p class=\"tooltip-text\">' + body[0].split(':')[0] + '</p>';\n                            });\n\n                        }\n                        const position = tooltipModel.chart.canvas.getBoundingClientRect();\n\n                        // Display, position, and set styles for font\n                        tooltipBox.style.opacity = 1;\n                        tooltipBox.style.position = 'absolute';\n                        let left = tooltip.xAlign === 'right'\n                            ? position.left + window.pageXOffset - 200 + tooltip.caretX\n                            : position.left + window.pageXOffset + tooltip.caretX;\n                        tooltipBox.style.left = left + 'px';\n                        tooltipBox.style.top = position.top + window.pageYOffset + tooltip.caretY + 'px';\n\n                        tooltipBox.style.pointerEvents = 'none';\n                    }\n                }\n            },\n            lineAt: grade,\n            indexAxis: 'y',\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                x: {\n                    stacked: true,\n                    ticks: {\n                        font: {\n                            size: 16\n                        }\n                    }\n                },\n                y: {\n                    stacked: true\n                }\n            }\n        }\n    });\n};\n\nexport const init = () => {\n    const allCanvases = document.getElementsByClassName('report-chart');\n    for (let i = 0; i < allCanvases.length; i++) {\n        const canvas = allCanvases[i];\n        createChart(canvas.attributes['data-eval-name'].value,\n                    canvas.attributes['data-eval-grade'].value,\n                    canvas.attributes['data-eval-maxgrade'].value);\n    }\n};\n"],"names":["createChart","async","id","grade","maxgrade","horLine","afterDraw","chart","ctx","lineWidth","scale","chartArea","width","curr","config","_config","options","lineAt","place","left","strokeStyle","beginPath","moveTo","top","lineTo","bottom","closePath","stroke","kaavio","document","getElementById","getContext","strings","basicDataset","i","key","component","type","label","data","backgroundColor","lineSet","evalStrings","length","evalString","showLine","pointRadius","selectedDataset","Chart","labels","datasets","plugins","legend","display","tooltip","enabled","external","tooltipModel","name","canvas","attributes","value","getBody","bodyItem","lines","tooltipBox","createElement","classList","add","body","appendChild","map","split","style","opacity","remove","yAlign","forEach","innerHTML","position","getBoundingClientRect","xAlign","window","pageXOffset","caretX","pageYOffset","caretY","pointerEvents","indexAxis","responsive","maintainAspectRatio","scales","x","stacked","ticks","font","size","y","allCanvases","getElementsByClassName"],"mappings":";;;;;8IAWMA,YAAcC,MAAMC,GAAIC,MAAOC,kBAC3BC,QAAU,CACZC,UAAYC,cACFC,IAAMD,MAAMC,IAClBA,IAAIC,UAAY,UACVC,MAAQH,MAAMI,UAAUC,MAAQR,SAChCS,KAAON,MAAMO,OAAOC,QAAQC,QAAQC,OACpCC,MAAQX,MAAMI,UAAUQ,KAAQT,MAAQG,KAE9CL,IAAIY,YAAc,UAClBZ,IAAIa,YACJb,IAAIc,OAAOJ,MAAOX,MAAMI,UAAUY,KAClCf,IAAIgB,OAAON,MAAOX,MAAMI,UAAUc,QAClCjB,IAAIkB,YACJlB,IAAImB,WAINC,OAASC,SAASC,eAAe5B,IAAI6B,WAAW,UAElDC,QAAU,GACVC,aAAe,OACd,IAAIC,EAAI,EAAGA,GAAK9B,SAAU8B,IAC3BF,QAAU,IAAIA,QAAS,CACnBG,cAAQjC,qBAAYgC,GACpBE,UAAW,aAEXF,GAAK,IACLD,aAAe,IAAIA,aAAc,CAC7BI,KAAM,MACNC,MAAO,SACPC,KAAM,CAAC,GACPC,gBAAiBN,EAAI,EAAI,2BAA6B,kCAK9DO,QAAU,SACRC,kBAAoB,oBAAWV,aAChC,IAAIE,EAAI,EAAGA,EAAIQ,YAAYC,OAAQT,IAAK,OACnCU,WAAaF,YAAYR,GACzBS,OAAe,IAANT,EAAU,EAAI,EAC7BO,QAAU,IAAIA,QACV,CACIJ,KAAM,OACNC,MAAOM,WACPL,KAAM,CAACI,QACPH,gBAAiB,mBACjBK,UAAU,EACVC,YAAa,aAKnBC,gBAAkB,IACjBN,WACAR,kBAGH1B,eAAMyC,MAAMpB,OAAQ,CACpBS,KAAM,MACNE,KAAM,CACFU,OAAQ,CAAC,IACTC,SAAUH,iBAEdI,QAAS,CAAC9C,SACVW,QAAS,CACLmC,QAAS,CACLC,OAAQ,CACJC,SAAS,GAEbC,QAAS,CACLC,SAAS,EACTC,SAAWC,qBACDC,KAAOD,aAAalD,MAAMoD,OAAOC,WAAW,kBAAkBC,MAC9DP,QAAUG,aAAaH,QACvBQ,QAAWC,UACNA,SAASC,UAEhBC,WAAapC,SAASC,uCAAgC4B,UAErDO,aACDA,WAAapC,SAASqC,cAAc,OACpCD,WAAWE,UAAUC,IAAI,eACzBH,WAAW/D,2BAAsBwD,MACjC7B,SAASwC,KAAKC,YAAYL,aAG1BX,QAAQe,KAAM,IAEwB,WADpBf,QAAQe,KAAKE,IAAIT,SACrB,GAAG,GAAGU,MAAM,KAAK,eAC3BP,WAAWQ,MAAMC,QAAU,MAKX,IAApBpB,QAAQoB,oBACRT,WAAWQ,MAAMC,QAAU,MAI/BT,WAAWE,UAAUQ,OAAO,QAAS,QAAS,gBAC1CrB,QAAQsB,OACRX,WAAWE,UAAUC,IAAId,QAAQsB,QAEjCX,WAAWE,UAAUC,IAAI,gBAGzBd,QAAQe,KAAM,CACIf,QAAQe,KAAKE,IAAIT,SAEzBe,SAASR,OACfJ,WAAWa,UAAY,2BAA6BT,KAAK,GAAGG,MAAM,KAAK,GAAK,gBAI9EO,SAAWtB,aAAalD,MAAMoD,OAAOqB,wBAG3Cf,WAAWQ,MAAMC,QAAU,EAC3BT,WAAWQ,MAAMM,SAAW,eACxB5D,KAA0B,UAAnBmC,QAAQ2B,OACbF,SAAS5D,KAAO+D,OAAOC,YAAc,IAAM7B,QAAQ8B,OACnDL,SAAS5D,KAAO+D,OAAOC,YAAc7B,QAAQ8B,OACnDnB,WAAWQ,MAAMtD,KAAOA,KAAO,KAC/B8C,WAAWQ,MAAMlD,IAAMwD,SAASxD,IAAM2D,OAAOG,YAAc/B,QAAQgC,OAAS,KAE5ErB,WAAWQ,MAAMc,cAAgB,UAI7CtE,OAAQd,MACRqF,UAAW,IACXC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACJC,EAAG,CACCC,SAAS,EACTC,MAAO,CACHC,KAAM,CACFC,KAAM,MAIlBC,EAAG,CACCJ,SAAS,sBAOT,WACVK,YAAcrE,SAASsE,uBAAuB,oBAC/C,IAAIjE,EAAI,EAAGA,EAAIgE,YAAYvD,OAAQT,IAAK,OACnCyB,OAASuC,YAAYhE,GAC3BlC,YAAY2D,OAAOC,WAAW,kBAAkBC,MACpCF,OAAOC,WAAW,mBAAmBC,MACrCF,OAAOC,WAAW,sBAAsBC"}