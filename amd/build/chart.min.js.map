{"version":3,"file":"chart.min.js","sources":["../src/chart.js"],"sourcesContent":["// Standard license block omitted.\n/*\n * @module     mod_digitala/mic\n * @copyright  2022 Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport chart from 'chart';\nimport {get_strings as getStrings} from 'core/str';\n\n\nconst createChart = async(id, grade, maxgrade) => {\n    const horLine = {\n        afterDraw: (chart) => {\n            const ctx = chart.ctx;\n            ctx.lineWidth = 3.5;\n            const scale = chart.chartArea.width / maxgrade;\n            const curr = chart.config._config.options.lineAt;\n            const place = chart.chartArea.left + (scale * curr);\n\n            ctx.strokeStyle = \"#ffb000\";\n            ctx.beginPath();\n            ctx.moveTo(place, chart.chartArea.top);\n            ctx.lineTo(place, chart.chartArea.bottom);\n            ctx.closePath();\n            ctx.stroke();\n        }\n    };\n\n    const kaavio = document.getElementById(id).getContext('2d');\n\n    let strings = [];\n    for (let i = 0; i <= maxgrade; i++) {\n        strings = [...strings, {\n            key: `${id}_score-${i}`,\n            component: 'digitala'\n        }];\n    }\n\n    let lineSet = [];\n\n    const evalStrings = await getStrings(strings);\n    for (let i = 0; i < evalStrings.length; i++) {\n        const evalString = evalStrings[i];\n        const length = i === 0 ? 0 : 1;\n        lineSet = [...lineSet,\n            {\n                type: 'line',\n                label: evalString,\n                data: [length],\n                backgroundColor: 'rgba(255,0,0,1)',\n                showLine: true,\n                pointRadius: 7.5,\n            }\n        ];\n    }\n\n    let basicDataset = [\n        ...lineSet,\n        {\n            type: 'bar',\n            title: 'toot',\n            label: 'noshow',\n            data: [1],\n            backgroundColor: 'rgba(182, 182, 182, 0.3)'\n        },\n        {\n            type: 'bar',\n            title: 'toot',\n            label: 'noshow',\n            data: [1],\n            backgroundColor: 'rgba(123, 123, 123, 0.3)'\n        },\n        {\n            type: 'bar',\n            title: 'toot',\n            label: 'noshow',\n            data: [1],\n            backgroundColor: 'rgba(182, 182, 182, 0.3)'\n        },\n    ];\n\n    if (maxgrade === '4') {\n        basicDataset = [...basicDataset, {\n            type: 'bar',\n            label: 'noshow',\n            data: [1],\n            backgroundColor: 'rgba(123, 123, 123, 0.3)'\n        }];\n    }\n\n    const selectedDataset = basicDataset;\n\n    new chart.Chart(kaavio, {\n        type: 'bar',\n        data: {\n            labels: [\"\"],\n            datasets: selectedDataset\n        },\n        plugins: [horLine],\n        options: {\n            plugins: {\n                legend: {\n                    display: false\n                },\n                tooltip: {\n                    enabled: false,\n                    external: (tooltipModel) => {\n                        const name = tooltipModel.chart.canvas.attributes['data-eval-name'].value;\n                        const tooltip = tooltipModel.tooltip;\n                        const getBody = (bodyItem) => {\n                            return bodyItem.lines;\n                        };\n                        let tooltipBox = document.getElementById(`grade-tooltip-${name}`);\n\n                        if (!tooltipBox) {\n                            tooltipBox = document.createElement('div');\n                            tooltipBox.classList.add('tooltip-box');\n                            tooltipBox.id = `grade-tooltip-${name}`;\n                            document.body.appendChild(tooltipBox);\n                        }\n\n                        if (tooltip.body) {\n                            const bodyLines = tooltip.body.map(getBody);\n                            if (bodyLines[0][0].split(':')[0] === \"noshow\") {\n                                tooltipBox.style.opacity = 0;\n                                return;\n                            }\n                        }\n\n                        if (tooltip.opacity === 0) {\n                            tooltipBox.style.opacity = 0;\n                            return;\n                        }\n\n                        tooltipBox.classList.remove('above', 'below', 'no-transform');\n                        if (tooltip.yAlign) {\n                            tooltipBox.classList.add(tooltip.yAlign);\n                        } else {\n                            tooltipBox.classList.add('no-transform');\n                        }\n\n                        if (tooltip.body) {\n                            const bodyLines = tooltip.body.map(getBody);\n\n                            bodyLines.forEach((body) => {\n                                tooltipBox.innerHTML = '<p class=\"tooltip-text\">' + body[0].split(':')[0] + '</p>';\n                            });\n\n                        }\n                        const position = tooltipModel.chart.canvas.getBoundingClientRect();\n\n                        // Display, position, and set styles for font\n                        tooltipBox.style.opacity = 1;\n                        tooltipBox.style.position = 'absolute';\n                        let left = tooltip.xAlign === \"right\"\n                            ? position.left + window.pageXOffset - 200 + tooltip.caretX\n                            : position.left + window.pageXOffset + tooltip.caretX;\n                        tooltipBox.style.left = left + 'px';\n                        tooltipBox.style.top = position.top + window.pageYOffset + tooltip.caretY + 'px';\n\n                        tooltipBox.style.pointerEvents = 'none';\n                    }\n                }\n            },\n            lineAt: grade,\n            indexAxis: 'y',\n            scales: {\n                x: {\n                    stacked: true,\n                },\n                y: {\n                    stacked: true\n                },\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true,\n                    }\n                }]\n            }\n        }\n    });\n};\n\nexport const init = (pagenum) => {\n\n    if (pagenum === 2 || pagenum === \"detail\") {\n        const allCanvases = document.getElementsByClassName('report-chart');\n        for (let i = 0; i < allCanvases.length; i++) {\n            const canvas = allCanvases[i];\n            createChart(canvas.attributes[\"data-eval-name\"].value,\n                        canvas.attributes[\"data-eval-grade\"].value,\n                        canvas.attributes[\"data-eval-maxgrade\"].value);\n        }\n    }\n};\n"],"names":["createChart","id","grade","maxgrade","horLine","afterDraw","chart","ctx","lineWidth","scale","chartArea","width","curr","config","_config","options","lineAt","place","left","strokeStyle","beginPath","moveTo","top","lineTo","bottom","closePath","stroke","kaavio","document","getElementById","getContext","strings","i","key","component","lineSet","evalStrings","length","evalString","type","label","data","backgroundColor","showLine","pointRadius","basicDataset","title","selectedDataset","Chart","labels","datasets","plugins","legend","display","tooltip","enabled","external","tooltipModel","name","canvas","attributes","value","getBody","bodyItem","lines","tooltipBox","createElement","classList","add","body","appendChild","map","split","style","opacity","remove","yAlign","forEach","innerHTML","position","getBoundingClientRect","xAlign","window","pageXOffset","caretX","pageYOffset","caretY","pointerEvents","indexAxis","scales","x","stacked","y","yAxes","ticks","beginAtZero","pagenum","allCanvases","getElementsByClassName"],"mappings":"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"}